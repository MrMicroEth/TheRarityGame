{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["provider","signer","contract","accounts","connectedNetwork","rarityAddress","App","useState","msg","setMsg","walletStatus","setWalletStatus","reward","setReward","sp","Array","fill","squarePattern","setSquarePattern","s","patternLimit","setPatternLimit","address","setAddress","submissionFee","setFee","footer","setFooter","a","walletConnected","window","ethereum","request","method","initialize","ethers","providers","Web3Provider","getNetwork","getSigner","getAddress","_address","Contract","Rarity","abi","pL","toString","utils","fee","sFee","formatEther","fFee","toFixed","console","log","message","refreshAccount","fetchPatterns","checkReward","length","chainId","name","overrides","value","parseEther","submitPattern","newPatternFilter","filters","newPattern","on","_id","burnFilter","patternBurned","claimReward","claim","wait","receipt","_reward","status","parseInt","res","useEffect","patternGrid","setPatternGrid","newGrid","fetchPatternIDs","data","i","fetchPattern","pattern","patternIsActive","grid","selected","squareClicked","newStyle","background","className","style","onClick","slice","gridArray","grids","push","multiGrid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.605cf6dc.chunk.js","sourcesContent":["import './App.css';\nimport { useEffect, useState } from 'react';\nimport { ethers } from 'ethers' \nimport Rarity from './artifacts/contracts/Rarity.sol/Rarity.json'\n\n// Update with the contract address logged out to the CLI when it was deployed \n//const rarityAddress = \"\" //mainnet\nconst rarityAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\" // localhost\n//const networkID = 3 //ropsten\n//const networkID = 1 //mainnet\nconst networkID = 1337 //localhost\nlet provider \nlet signer\nlet contract \nlet accounts\nconst  numSquares = 9\nlet  connectedNetwork  \n\nfunction App() {\n\n  const [msg, setMsg] = useState()\n  const [walletStatus, setWalletStatus] = useState(\"Connect Wallet\")\n  const [reward, setReward] = useState(\"0.0\")\n  const sp = new Array(numSquares).fill(0)\n  const [squarePattern, setSquarePattern] = useState(sp)\n  const s = new Array(numSquares)\n  const [patternLimit, setPatternLimit] = useState(\"?\")\n  const [address, setAddress] = useState()\n  const [submissionFee, setFee] = useState(\"?\")\n  const [footer, setFooter] = useState()\n\n  useEffect(() => {\n    initialize()\n  },[])\n  \n  async function connectWallet() {\n    if(walletConnected())return\n      accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n      initialize()\n  }\n  \n  async function initialize() {\n    if (window.ethereum) {\n      try {\n        accounts = await window.ethereum.request({ method: 'eth_accounts' });\n        provider = new ethers.providers.Web3Provider(window.ethereum)\n        connectedNetwork  = await provider.getNetwork()\n        signer = provider.getSigner()\n        const _address = await signer.getAddress()\n        setAddress(_address)\n        contract = new ethers.Contract(rarityAddress, Rarity.abi, signer)\n        const pL = await contract.patternLimit()\n        setPatternLimit(pL.toString())\n        const sFee = ethers.utils.formatEther(await contract.fee())\n        const fFee = (+sFee).toFixed(2)\n        setFee(fFee)\n\n      } catch (err) {\n        console.log(\"Error connecting Wallet: \"+ err.message)\n        walletConnected()\n        return false\n      }\n      setMsg(\"\")\n      refreshAccount()\n    } else {\n      setMsg(\"Please install Metamask\")\n      return false\n    }\n  }\n\n  function refreshAccount() { \n      fetchPatterns()\n      checkReward()\n  }\n\n  function walletConnected() {\n    if (window.ethereum && accounts && accounts.length > 0) {\n      setWalletStatus(\"Wallet Connected\")\n      if (connectedNetwork.chainId !== networkID && ethers.providers){ \n        setMsg(\"Please connect to the \" + ethers.providers.getNetwork(networkID).name + \" Network\")\n        return false\n      }\n      return true\n    } else {\n      setWalletStatus(\"Connect Wallet\")\n      setAddress(\"\")\n      setMsg(\"Please Connect Wallet\")\n      return false\n    }\n  }\n\n  async function submitPattern() {\n    if (!walletConnected()) return\n    let overrides = {\n      value: ethers.utils.parseEther(\"0.1\")     // ether in this case MUST be a string\n    }; \n    console.log(\"send tx: \", squarePattern);\n    let transaction;\n    try {\n      transaction = await contract.submitPattern(squarePattern, overrides)\n    } catch (err) {\n      setMsg(err.message)\n      setMsg(\"Pattern is too common, please try another\")\n      return false\n    }\n    setMsg(\"Tx Pending\")\n    \n    //set event listener\n    const newPatternFilter = contract.filters.newPattern(address, null)\n    contract.on(newPatternFilter, (  _address, _id) => {\n      console.log('Address  :', _address);\n      console.log('Pattern Id : ', _id.toString());  //Event object\n      setMsg(`Pattern ID No. ${_id.toString()} has been submitted!`)\n      refreshAccount()\n    });\n    \n    const burnFilter = contract.filters.patternBurned(address, null)\n    contract.on(burnFilter, (  _address, _id) => {\n      console.log('Address  :', _address);\n      console.log('Pattern Id Burned : ', _id.toString());  //Event object\n      setFooter(`Pattern ID No. ${_id.toString()} has been burned`)\n      refreshAccount()\n    });       \n    /* Instead of using a receipt we are listening for the event now\n    const receipt = await transaction.wait()\n    if(receipt.status === 1) {\n      setMsg(\"Pattern submission sucessful!\")\n    } else {\n      setMsg(\"There was an error submitting your pattern, please try again\")\n      return false;\n    }\n    */\n  }\n  \n\n  async function claimReward() {\n    if (!walletConnected()) return\n    if (reward === 0) {\n      setMsg(\"No Reward to Claim\")\n      return\n    }\n    let claim\n    try {\n    claim = await contract.claimReward();\n    } catch (err) {\n      setMsg(err.message)\n      return false\n    }\n    setMsg(\"Tx Pending\")\n    const receipt = await claim.wait()\n    //wait for transaction to finish\n    //check the reward amount, update msg, check that reward is zeroed out\n    const _reward = await checkReward() \n    if(receipt.status === 1 && parseInt(_reward) === 0) {\n      setMsg(reward + \" Eth Reward Claimed Sucessfully\")\n    } else {\n      setMsg(\"There was an error, please try again\")\n      return false;\n    }\n  }\n\n  async function checkReward() {\n    if (!walletConnected()) return\n    try {\n      const _reward = ethers.utils.formatEther(await contract.checkReward())\n      const res = (+_reward).toFixed(2);\n      setReward(res)\n      return _reward\n    } catch (err) {\n      setMsg(err)\n    }\n  }\n\n  const [patternGrid, setPatternGrid]  = useState(s)\n\n  async function fetchPatterns() {\n    if (!walletConnected()) return\n\n      try {\n        const newGrid = new Array() \n        const data = await contract.fetchPatternIDs()\n        if(data.length > 0){\n          for (let i = 0; i < data.length; i++) {\n            const pattern = await contract.fetchPattern(data[i])\n            const active = await contract.patternIsActive(data[i])\n            if(active){\n              newGrid[i] = new Array()\n              newGrid[i] = pattern// = pattern.map(x => x.toNumber())\n            }\n          }\n          setPatternGrid(newGrid)\n        } else {\n          //setSavedPatterns(\"No Patterns Found\")\n        }\n\n      } catch (err) {\n        setMsg(err)\n      }\n  }\n\n  function changeStyle(i){\n    const newPattern = squarePattern.slice()\n    if(!newPattern[i]) {\n      newPattern[i] = 1\n    }else {\n      newPattern[i] = 0\n    }\n    setSquarePattern(newPattern)\n  }\n  \n  function multiGrid(gridArray){\n    if(gridArray && gridArray.length){\n      const grids = new Array()\n      for (let i = 0; i < gridArray.length; i++) {\n        if(gridArray[i]){\n          grids.push(\n          <div className = \"activePatterns\">\n            <span className = \"id\" >ID: {i}</span>\n            {grid(gridArray[i])}\n          </div>\n          )\n        }\n      }\n      return grids\n    }\n  }\n\n  function grid(selected, squareClicked = () => {}){\n    let newStyle = new Array(numSquares)\n    //use the array to set square style\n    if(!selected) return \n    for (let i = 0; i < selected.length; i++) {\n\n    if(selected[i]) {\n      newStyle[i] = { background : 'grey'}\n    }else {\n      newStyle[i] = {background : 'white'}\n    }\n  }\n\n    return(\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <div className=\"board-row\">\n            <button className=\"square\" style={newStyle[0]} onClick={() =>squareClicked(0)}></button>\n            <button className=\"square\" style={newStyle[1]} onClick={() =>squareClicked(1)}></button>\n            <button className=\"square\" style={newStyle[2]} onClick={() =>squareClicked(2)}></button>\n          </div>\n          <div className=\"board-row\">\n            <button className=\"square\" style={newStyle[3]} onClick={() =>squareClicked(3)}></button>\n            <button className=\"square\" style={newStyle[4]} onClick={() =>squareClicked(4)}></button>\n            <button className=\"square\" style={newStyle[5]} onClick={() =>squareClicked(5)}></button>\n          </div>\n          <div className=\"board-row\">\n            <button className=\"square\" style={newStyle[6]} onClick={() =>squareClicked(6)}></button>\n            <button className=\"square\" style={newStyle[7]} onClick={() =>squareClicked(7)}></button>\n            <button className=\"square\" style={newStyle[8]} onClick={() =>squareClicked(8)}></button>\n          </div>\n        </div>\n      </div>\n      //<input onChange={e => setPatternValue(e.target.value)} placeholder=\"Submit Pattern\" />\n    )\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"topBar\">\n        <div className=\"claim\">\n          <button onClick={claimReward}>Claim Reward</button>\n          <span className=\"reward\">Reward: {reward} Eth</span>\n        </div>\n\n        <div className=\"wallet\">\n          <button onClick={connectWallet}>{walletStatus}</button>\n          <div className=\"address\">{address && address.slice(0,5) + \"...\" + address.slice(-4)}</div>\n        </div>\n      </div>\n      <div className=\"msg\">{msg}</div>\n      <h1 className=\"Title\">The Rarity Game</h1>\n      <div className=\"gameContainer\">\n        <div className=\"gameAndButton\">\n          {grid(squarePattern, changeStyle)}\n          <button onClick={submitPattern}>Save Pattern</button>\n        </div>\n        <div className=\"instructions\">\n          <ul>\n            <b>Rules:</b>\n            <li>Create and submit a unique pattern by selecing boxes.</li>\n            <li>After the pattern limit of {patternLimit} patterns is reached, \n            each new pattern submission will trigger a burn of the most common pattern</li>\n            <li>A pattern submissionn fee of {submissionFee} Eth is collected and evenly divided up amongst current patterns</li>\n            <li>If a pattern is elimainated, the rewards it has earned remain available, but the pattern will earn no additional rewards</li> \n            <li>Pattern owners can withdraw rewards earned by their patterns at anytime</li> \n            <li>The longer your pattern stays active, the more rewards you earn!</li> \n          </ul>\n        </div>\n\n      </div>\n      <div>\n        <h2 className=\"app-pattern-title\">Your Active Patterns</h2>\n        <div className=\"app-pattern\">{multiGrid(patternGrid)}</div>\n        <div className=\"burnMsg\">{footer}</div>\n      </div>\n    </div>\n  );\n}\n\n  \nexport default App\n//","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}